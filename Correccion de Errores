*// Estos son los try y catch implementando//*   
    public static double[] expUnif(Matrix A, int n, double delta,Vector leftVec,Vector rightVec) {
    	try {	return expUnif(A, n, delta, leftVec, rightVec, Integer.MAX_VALUE);
          
        }catch(Exception i) {
    		System.out.println("No se puede obtener el valor m√°ximo");
        	i.printStackTrace();
    		}
    	finally {
    	return expUnif(A, n, delta, leftVec, rightVec, Integer.MAX_VALUE);
    	}
    }


 public static double[] exp(Matrix A, int n, double delta,
    
    		Vector leftVec,
            Vector rightVec, boolean useUniformization) {    
    	try {
    	if (useUniformization) {
            return expUnif(A, n, delta, leftVec, rightVec);
        } else {
            // return expRunge(A, n, delta, leftMat, rightMat);
            return null;
        } 
    	}catch(Exception m){
    		m.printStackTrace();
    	}
    	if (useUniformization) {
            return expUnif(A, n, delta, leftVec, rightVec);
        } else {
            // return expRunge(A, n, delta, leftMat, rightMat);
            return null;
        }
   
    
        
        
   }
   
   
   public static double exp(Matrix A, double x,Vector leftVec,Vector rightVec){

       try {
        double result[] = exp(A, 2, x, leftVec, rightVec, true);    
        return result[1];
        }catch (Exception b) {
        	System.out.print("");
         	b.printStackTrace();
        }
        finally {
        	double result[] = exp(A, 2, x, leftVec, rightVec, true);
        	return result[1];
        }
    }
       
    
    /**
     * @see jphase.ContPhaseVar#pdf(double)
     */
    @SuppressWarnings("finally")
	public double pdf(double x) {
    	try { 	

    	return MatrixUtils.exp(this.getMatrix(), x, this.getVector(), this
                .getMat0());
    	} catch(Exception g) {
         	g.printStackTrace();	
    	}
    finally {
     	return MatrixUtils.exp(this.getMatrix(), x, this.getVector(), this
                .getMat0());

    }
    }
    
